!function(e){var n={};function o(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return e[t].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var l in e)o.d(t,l,function(n){return e[n]}.bind(null,l));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n,o){"use strict";angular.module("angularModalService",[]).provider("ModalService",(function(){var e={closeDelay:0};this.configureOptions=function(n){angular.extend(e,n)},this.$get=["$animate","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","$timeout",function(n,o,t,l,r,c,i,s,u){return new function(e){var r=this;r.configOptions=e,r.openModals=[],r.closeModals=function(e,n){for(n=n||r.configOptions.closeDelay;r.openModals.length;)r.openModals[0].close(e,n),r.openModals.splice(0,1)};var a=function(e){e.controller=function(e){return["$scope","close",function(n,o){n.close=o,n.bindings=e.bindings}]}(e),e.template=function(e){var n=function(e){return e.replace(/([a-z0-9])([A-Z])/g,(function(e,n,o){return[n,o].join("-").toLowerCase()}))},o=n(e.component),t="<"+o+' close="close"',l=Object.keys(e.bindings||{});l.length>0&&(t+=" "+l.map((function(e){return n(e)+'="bindings.'+e+'"'})).join(" "));return t+="></"+o+">"}(e)};r.showModal=function(e){e.component&&a(e);var p=angular.element(o[0].body),f=i.defer();return e.controller?(function(e,n){var o=i.defer();return e?o.resolve(e):n?s(n,!0).then((function(e){o.resolve(e)}),(function(e){o.reject(e)})):o.reject("No template or templateUrl has been specified."),o.promise}(e.template,e.templateUrl).then((function(s){var a={},d=(e.scope||c).$new(),m=null,g=e.locationChangeSuccess;!1===g?m=angular.noop:angular.isNumber(g)&&g>=0?u((function(){m=c.$on("$locationChangeSuccess",h.close)}),g):u((function(){m=c.$on("$locationChangeSuccess",h.close)}),r.configOptions.closeDelay);var v=i.defer(),b=i.defer(),y=!1,h={$scope:d,close:function(o,t){y||(y=!0,t=t||r.configOptions.closeDelay,"function"==typeof e.preClose&&e.preClose(a,o,t),null==t&&(t=0),u((function(){!function(o){v.resolve(o),e.bodyClass&&p[0].classList.remove(e.bodyClass);n.leave($).then((function(){if($){b.resolve(o),d.$destroy();for(var e=0;e<r.openModals.length;e++)if(r.openModals[e].modal===a){r.openModals.splice(e,1);break}h.close=null,f=null,v=null,a=null,h=null,$=null,d=null}})),m&&m()}(o)}),t))}};e.inputs&&angular.extend(h,e.inputs);var $=t(s)(d);h.$element=$;var M=d[e.controllerAs],j=l(e.controller,h,!1,e.controllerAs);e.controllerAs&&M&&angular.extend(j,M);var O,S,C,x=p;angular.isString(e.appendElement)?x=angular.element(o[0].querySelector(e.appendElement)):e.appendElement&&(x=e.appendElement),S=$,(C=(O=x).children()).length>0?n.enter(S,O,C[C.length-1]):n.enter(S,O),e.bodyClass&&p[0].classList.add(e.bodyClass),a.controller=j,a.scope=d,a.element=$,a.close=v.promise,a.closed=b.promise,angular.isFunction(a.controller.$onInit)&&a.controller.$onInit(),f.resolve(a),document.activeElement.blur(),r.openModals.push({modal:a,close:h.close})})).then(null,(function(e){f.reject(e)})),f.promise):(f.reject("No controller has been specified."),f.promise)}}(e)}]}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,