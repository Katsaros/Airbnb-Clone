/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BaseStorageService } from './base-storage.service';
import { StorageTranscoders } from './storage-transcoders';
/**
 * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and
 * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the
 * `StorageService` interface.
 */
export class WebStorageService extends BaseStorageService {
    /**
     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.
     *
     * @param {?} storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.
     */
    constructor(storage) {
        super(StorageTranscoders.JSON);
        this.storage = storage;
    }
    /**
     * Checks whether an entry with the specified key exists in the storage.
     *
     * @param {?} key Identifier of the entry for which its presence in the storage is to be checked.
     * @return {?} `true` if an entry with the specified key exists in the storage, `false` if not.
     */
    has(key) {
        return this.storage.getItem(key) !== null;
    }
    /**
     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.
     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.
     *
     * @param {?} key Identifier of the entry which is to be removed.
     * @return {?}
     */
    remove(key) {
        this.storage.removeItem(key);
    }
    /**
     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set
     * for key *x*.
     * @return {?}
     */
    clear() {
        this.storage.clear();
    }
    /**
     * Performs the actual retrieval of a value from storage.
     *
     * @protected
     * @param {?} key Identifier of the entry whose value is to be retrieved.
     * @return {?} The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.
     */
    getItem(key) {
        /** @type {?} */
        const value = this.storage.getItem(key);
        return value !== null ? value : undefined;
    }
    /**
     * Stores the provided value using specified key in the storage.
     *
     * @protected
     * @param {?} key   Identifier of the entry for which the value is to be stored.
     * @param {?} value The value that is to be stored.
     * @return {?}
     */
    setItem(key, value) {
        return this.storage.setItem(key, value);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    WebStorageService.prototype.storage;
}
/**
 * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even
 * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,
 * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.
 *
 * @param {?} storage Storage object which is to be tested for availability.
 * @return {?} `true` if the specified storage can be used, `false` if not.
 */
export function isStorageAvailable(storage) {
    // Check if storage is available.
    if (!storage) {
        return false;
    }
    // Check if the storage can actually be accessed.
    try {
        /** @type {?} */
        const now = Date.now();
        /** @type {?} */
        const testItemKey = `storage-test-entry-${now}`;
        /** @type {?} */
        const testItemValue = `storage-test-value-${now}`;
        storage.setItem(testItemKey, testItemValue);
        /** @type {?} */
        const retrievedItemValue = storage.getItem(testItemKey);
        storage.removeItem(testItemKey);
        return retrievedItemValue === testItemValue;
    }
    catch (error) {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLXN0b3JhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC13ZWJzdG9yYWdlLXNlcnZpY2UvIiwic291cmNlcyI6WyJzcmMvd2ViLXN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQU8zRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsa0JBQXVCOzs7Ozs7SUFPMUQsWUFBNkIsT0FBZ0I7UUFDekMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRE4sWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUU3QyxDQUFDOzs7Ozs7O0lBUU0sR0FBRyxDQUFDLEdBQVc7UUFDbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUM7SUFDOUMsQ0FBQzs7Ozs7Ozs7SUFRTSxNQUFNLENBQUMsR0FBVztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7Ozs7SUFNTSxLQUFLO1FBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7Ozs7OztJQVFTLE9BQU8sQ0FBQyxHQUFXOztjQUNuQixLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBRXZDLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDOUMsQ0FBQzs7Ozs7Ozs7O0lBUVMsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FFSjs7Ozs7O0lBdERlLG9DQUFpQzs7Ozs7Ozs7OztBQWdFakQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLE9BQWdCO0lBQy9DLGlDQUFpQztJQUNqQyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1YsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxpREFBaUQ7SUFDakQsSUFBSTs7Y0FDTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTs7Y0FDaEIsV0FBVyxHQUFHLHNCQUFzQixHQUFHLEVBQUU7O2NBQ3pDLGFBQWEsR0FBRyxzQkFBc0IsR0FBRyxFQUFFO1FBQ2pELE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDOztjQUN0QyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUN2RCxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWhDLE9BQU8sa0JBQWtCLEtBQUssYUFBYSxDQUFDO0tBQy9DO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL2Jhc2Utc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VUcmFuc2NvZGVycyB9IGZyb20gJy4vc3RvcmFnZS10cmFuc2NvZGVycyc7XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgYFN0b3JhZ2VTZXJ2aWNlYCBpbnRlcmZhY2UgdGhhdCB1c2VzIGFuIHVuZGVybHlpbmcgKHdlYikgYFN0b3JhZ2VgIG9iamVjdCwgc3VjaCBhcyBgbG9jYWxTdG9yYWdlYCBhbmRcbiAqIGBzZXNzaW9uU3RvcmFnZWAsIGFzIGJhY2tpbmcgZGF0YSBzdG9yZS4gVGhpcyBjbGFzcyBiYXNpY2FsbHkgd3JhcHMgdGhlIGBTdG9yYWdlYCBvYmplY3Qgc28gaXQgY2FuIGJlIGFjY2Vzc2VkIHRocm91Z2ggdGhlXG4gKiBgU3RvcmFnZVNlcnZpY2VgIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlN0b3JhZ2VTZXJ2aWNlIGV4dGVuZHMgQmFzZVN0b3JhZ2VTZXJ2aWNlPGFueT4ge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBgV2ViU3RvcmFnZVNlcnZpY2VgIGluc3RhbmNlIHRoYXQgdXNlcyB0aGUgc3BlY2lmaWVkICh3ZWIpIHN0b3JhZ2Ugb2JqZWN0IGFzIHVuZGVybHlpbmcgYmFja2luZyBzdG9yYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0b3JhZ2UgU3RvcmFnZSBvYmplY3Qgd2hpY2ggaXMgdG8gYmUgd3JhcHBlZCBpbiBhIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB0aGUgYFN0b3JhZ2VTZXJ2aWNlYCBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdG9yYWdlOiBTdG9yYWdlKSB7XG4gICAgICAgIHN1cGVyKFN0b3JhZ2VUcmFuc2NvZGVycy5KU09OKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhbiBlbnRyeSB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGV4aXN0cyBpbiB0aGUgc3RvcmFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIGtleSBJZGVudGlmaWVyIG9mIHRoZSBlbnRyeSBmb3Igd2hpY2ggaXRzIHByZXNlbmNlIGluIHRoZSBzdG9yYWdlIGlzIHRvIGJlIGNoZWNrZWQuXG4gICAgICogQHJldHVybnMgICAgIGB0cnVlYCBpZiBhbiBlbnRyeSB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGV4aXN0cyBpbiB0aGUgc3RvcmFnZSwgYGZhbHNlYCBpZiBub3QuXG4gICAgICovXG4gICAgcHVibGljIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KSAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBlbnRyeSB0aGF0IGlzIGlkZW50aWZpZWQgYnkgdGhlIHNwZWNpZmllZCBrZXkuIEF0dGVtcHRpbmcgdG8gcmVtb3ZlIGFuIGVudHJ5IGZvciBhbiB1bmtub3duIGtleSB3aWxsIGhhdmUgbm8gZWZmZWN0LlxuICAgICAqIEF0dGVtcHRpbmcgdG8gcmV0cmlldmUgYW4gZW50cnkgdmlhIHRoZSBgZ2V0YCBtZXRob2QgYWZ0ZXIgaXQgaGFzIGJlZW4gcmVtb3ZlZCB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgSWRlbnRpZmllciBvZiB0aGUgZW50cnkgd2hpY2ggaXMgdG8gYmUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBzdG9yYWdlIGJ5IHJlbW92aW5nIGFsbCBlbnRyaWVzLiBTdWJzZXF1ZW50IGBnZXQoeClgIGNhbGxzIGZvciBhIGtleSAqeCogd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAsIHVudGlsIGEgbmV3IHZhbHVlIGlzIHNldFxuICAgICAqIGZvciBrZXkgKngqLlxuICAgICAqL1xuICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGFjdHVhbCByZXRyaWV2YWwgb2YgYSB2YWx1ZSBmcm9tIHN0b3JhZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICBrZXkgSWRlbnRpZmllciBvZiB0aGUgZW50cnkgd2hvc2UgdmFsdWUgaXMgdG8gYmUgcmV0cmlldmVkLlxuICAgICAqIEByZXR1cm5zICAgICBUaGUgdmFsdWUgdGhhdCBpcyBzdG9yZWQgZm9yIHRoZSBzcGVjaWZpZWQgZW50cnkgb3IgYHVuZGVmaW5lZGAgaWYgbm8gZW50cnkgZXhpc3RzIGZvciB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0SXRlbShrZXk6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZXMgdGhlIHByb3ZpZGVkIHZhbHVlIHVzaW5nIHNwZWNpZmllZCBrZXkgaW4gdGhlIHN0b3JhZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5ICAgSWRlbnRpZmllciBvZiB0aGUgZW50cnkgZm9yIHdoaWNoIHRoZSB2YWx1ZSBpcyB0byBiZSBzdG9yZWQuXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0aGF0IGlzIHRvIGJlIHN0b3JlZC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCAod2ViKSBzdG9yYWdlIGlzIGF2YWlsYWJsZSBhbmQgZnVuY3Rpb25hbC4gVGhpcyBtaWdodCBub3QgYmUgdGhlIGNhc2UgZm9yIG9sZGVyIGJyb3dzZXJzLiBIb3dldmVyIGV2ZW5cbiAqIGNlcnRhaW4gYnJvd3NlcnMgdGhhdCBkbyBzdXBwb3J0IHRoZSB3ZWIgc3RvcmFnZSBBUEkgY2FuLCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMsIGhhdmUgbm9uIGZ1bmN0aW9uYWwgc3RvcmFnZSBvYmplY3RzLiBGb3IgZXhhbXBsZSxcbiAqIFNhZmFyaSBpcyBrbm93biB0byBoYXZlIGBsb2NhbFN0b3JhZ2VgIGFuZCBgc2Vzc2lvblN0b3JhZ2VgIHRocm93IGV4Y2VwdGlvbnMgaW4gcHJpdmF0ZSBtb2RlLlxuICpcbiAqIEBwYXJhbSAgIHN0b3JhZ2UgU3RvcmFnZSBvYmplY3Qgd2hpY2ggaXMgdG8gYmUgdGVzdGVkIGZvciBhdmFpbGFiaWxpdHkuXG4gKiBAcmV0dXJucyAgICAgICAgIGB0cnVlYCBpZiB0aGUgc3BlY2lmaWVkIHN0b3JhZ2UgY2FuIGJlIHVzZWQsIGBmYWxzZWAgaWYgbm90LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdG9yYWdlQXZhaWxhYmxlKHN0b3JhZ2U6IFN0b3JhZ2UpOiBib29sZWFuIHtcbiAgICAvLyBDaGVjayBpZiBzdG9yYWdlIGlzIGF2YWlsYWJsZS5cbiAgICBpZiAoIXN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRoZSBzdG9yYWdlIGNhbiBhY3R1YWxseSBiZSBhY2Nlc3NlZC5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCB0ZXN0SXRlbUtleSA9IGBzdG9yYWdlLXRlc3QtZW50cnktJHtub3d9YDtcbiAgICAgICAgY29uc3QgdGVzdEl0ZW1WYWx1ZSA9IGBzdG9yYWdlLXRlc3QtdmFsdWUtJHtub3d9YDtcbiAgICAgICAgc3RvcmFnZS5zZXRJdGVtKHRlc3RJdGVtS2V5LCB0ZXN0SXRlbVZhbHVlKTtcbiAgICAgICAgY29uc3QgcmV0cmlldmVkSXRlbVZhbHVlID0gc3RvcmFnZS5nZXRJdGVtKHRlc3RJdGVtS2V5KTtcbiAgICAgICAgc3RvcmFnZS5yZW1vdmVJdGVtKHRlc3RJdGVtS2V5KTtcblxuICAgICAgICByZXR1cm4gcmV0cmlldmVkSXRlbVZhbHVlID09PSB0ZXN0SXRlbVZhbHVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iXX0=