/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a
 * different default transcoder.
 * @template T
 */
var /**
 * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a
 * different default transcoder.
 * @template T
 */
ProxyStorageService = /** @class */ (function () {
    /**
     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual
     * read and writes are delegated to given storage service.
     *
     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.
     * @param subject           Storage service which should handle to actual storage of data.
     */
    function ProxyStorageService(defaultTranscoder, subject) {
        this.defaultTranscoder = defaultTranscoder;
        this.subject = subject;
    }
    /**
     * Checks whether an entry with the specified key exists in the storage.
     *
     * @param   key Identifier of the entry for which its presence in the storage is to be checked.
     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.
     */
    /**
     * Checks whether an entry with the specified key exists in the storage.
     *
     * @param {?} key Identifier of the entry for which its presence in the storage is to be checked.
     * @return {?} `true` if an entry with the specified key exists in the storage, `false` if not.
     */
    ProxyStorageService.prototype.has = /**
     * Checks whether an entry with the specified key exists in the storage.
     *
     * @param {?} key Identifier of the entry for which its presence in the storage is to be checked.
     * @return {?} `true` if an entry with the specified key exists in the storage, `false` if not.
     */
    function (key) {
        return this.subject.has(key);
    };
    /*
     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored
     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then
     * `undefined` will be returned.
     *
     * @param   key     Identifier of the entry whose value is to be retrieved.
     * @param   decoder Decoder to use for converting the stored value to the desired return type.
     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be
     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.
     */
    /*
         * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored
         * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then
         * `undefined` will be returned.
         *
         * @param   key     Identifier of the entry whose value is to be retrieved.
         * @param   decoder Decoder to use for converting the stored value to the desired return type.
         * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be
         *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.
         */
    /**
     * @param {?} key
     * @param {?=} decoder
     * @return {?}
     */
    ProxyStorageService.prototype.get = /*
         * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored
         * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then
         * `undefined` will be returned.
         *
         * @param   key     Identifier of the entry whose value is to be retrieved.
         * @param   decoder Decoder to use for converting the stored value to the desired return type.
         * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be
         *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.
         */
    /**
     * @param {?} key
     * @param {?=} decoder
     * @return {?}
     */
    function (key, decoder) {
        return this.subject.get(key, decoder || this.defaultTranscoder);
    };
    /**
     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given
     * value into a format that can be stored by the storage service's underlying storage.
     *
     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of
     * the value will be the same. It, however, does not necessarily return the same reference.
     *
     * @param key     Identifier of the entry which is to be created or updated.
     * @param value   Value which is to be stored.
     * @param encoder Encoder used to convert the given value into a format that can be used for storage.
     */
    /**
     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given
     * value into a format that can be stored by the storage service's underlying storage.
     *
     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of
     * the value will be the same. It, however, does not necessarily return the same reference.
     *
     * @param {?} key     Identifier of the entry which is to be created or updated.
     * @param {?} value   Value which is to be stored.
     * @param {?=} encoder Encoder used to convert the given value into a format that can be used for storage.
     * @return {?}
     */
    ProxyStorageService.prototype.set = /**
     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given
     * value into a format that can be stored by the storage service's underlying storage.
     *
     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of
     * the value will be the same. It, however, does not necessarily return the same reference.
     *
     * @param {?} key     Identifier of the entry which is to be created or updated.
     * @param {?} value   Value which is to be stored.
     * @param {?=} encoder Encoder used to convert the given value into a format that can be used for storage.
     * @return {?}
     */
    function (key, value, encoder) {
        this.subject.set(key, value, encoder || this.defaultTranscoder);
    };
    /**
     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.
     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.
     *
     * @param key Identifier of the entry which is to be removed.
     */
    /**
     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.
     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.
     *
     * @param {?} key Identifier of the entry which is to be removed.
     * @return {?}
     */
    ProxyStorageService.prototype.remove = /**
     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.
     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.
     *
     * @param {?} key Identifier of the entry which is to be removed.
     * @return {?}
     */
    function (key) {
        this.subject.remove(key);
    };
    /**
     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set
     * for key *x*.
     */
    /**
     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set
     * for key *x*.
     * @return {?}
     */
    ProxyStorageService.prototype.clear = /**
     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set
     * for key *x*.
     * @return {?}
     */
    function () {
        this.subject.clear();
    };
    /**
     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service
     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access
     * the same data.
     *
     * The default transcoder will not be changed for the storage service on which this function is invoked.
     *
     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.
     * @returns            A new storage service that uses the specified transcoder by default.
     */
    /**
     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service
     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access
     * the same data.
     *
     * The default transcoder will not be changed for the storage service on which this function is invoked.
     *
     * @template X
     * @param {?} transcoder Transcoder that should be used by default for read and write operations by the new storage service.
     * @return {?} A new storage service that uses the specified transcoder by default.
     */
    ProxyStorageService.prototype.withDefaultTranscoder = /**
     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service
     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access
     * the same data.
     *
     * The default transcoder will not be changed for the storage service on which this function is invoked.
     *
     * @template X
     * @param {?} transcoder Transcoder that should be used by default for read and write operations by the new storage service.
     * @return {?} A new storage service that uses the specified transcoder by default.
     */
    function (transcoder) {
        return new ProxyStorageService(transcoder, this.subject);
    };
    return ProxyStorageService;
}());
/**
 * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a
 * different default transcoder.
 * @template T
 */
export { ProxyStorageService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProxyStorageService.prototype.defaultTranscoder;
    /**
     * @type {?}
     * @private
     */
    ProxyStorageService.prototype.subject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHktc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnN0b3JhZ2Utc2VydmljZS8iLCJzb3VyY2VzIjpbInNyYy9wcm94eS1zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBT0E7Ozs7OztJQUVJOzs7Ozs7T0FNRztJQUNILDZCQUNxQixpQkFBdUMsRUFDdkMsT0FBdUI7UUFEdkIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFzQjtRQUN2QyxZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUN4QyxDQUFDO0lBRUw7Ozs7O09BS0c7Ozs7Ozs7SUFDSSxpQ0FBRzs7Ozs7O0lBQVYsVUFBVyxHQUFXO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRzs7Ozs7Ozs7Ozs7Ozs7OztJQUNJLGlDQUFHOzs7Ozs7Ozs7Ozs7Ozs7SUFBVixVQUFXLEdBQVcsRUFBRSxPQUE2QjtRQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7Ozs7Ozs7Ozs7Ozs7SUFDSSxpQ0FBRzs7Ozs7Ozs7Ozs7O0lBQVYsVUFBVyxHQUFXLEVBQUUsS0FBVSxFQUFFLE9BQTZCO1FBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7SUFDSSxvQ0FBTTs7Ozs7OztJQUFiLFVBQWMsR0FBVztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSSxtQ0FBSzs7Ozs7SUFBWjtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRzs7Ozs7Ozs7Ozs7O0lBQ0ksbURBQXFCOzs7Ozs7Ozs7OztJQUE1QixVQUFnQyxVQUFnQztRQUM1RCxPQUFPLElBQUksbUJBQW1CLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQUFDLEFBcEZELElBb0ZDOzs7Ozs7Ozs7Ozs7SUExRU8sZ0RBQXdEOzs7OztJQUN4RCxzQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VUcmFuc2NvZGVyLCBTdG9yYWdlRGVjb2RlciwgU3RvcmFnZUVuY29kZXIgfSBmcm9tICcuL3N0b3JhZ2UtdHJhbnNjb2Rlcic7XG5cbi8qKlxuICogQSBzdG9yYWdlIHNlcnZpY2UgaW1wbGVtZW50YXRpb24gdGhhdCBpcyB1c2VkIGFzIGEgcHJveHkgZm9yIGFub3RoZXIgc3RvcmFnZSBzZXJ2aWNlLiBUaGlzIGlzIHVzZWQgdG8gY3JlYXRlIHN0b3JhZ2Ugc2VydmljZXMgd2l0aCBhXG4gKiBkaWZmZXJlbnQgZGVmYXVsdCB0cmFuc2NvZGVyLlxuICovXG5leHBvcnQgY2xhc3MgUHJveHlTdG9yYWdlU2VydmljZTxUPiBpbXBsZW1lbnRzIFN0b3JhZ2VTZXJ2aWNlPFQ+IHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYFByb3h5U3RvcmFnZVNlcnZpY2VgIGluc3RhbmNlIHRoYXQgdXNlcyB0aGUgc3BlY2lmaWVkIHRyYW5zY29kZXIgYnkgZGVmYXVsdCBmb3IgcmVhZCBhbmQgd3JpdGUgb3BlcmF0aW9ucy4gQWN0dWFsXG4gICAgICogcmVhZCBhbmQgd3JpdGVzIGFyZSBkZWxlZ2F0ZWQgdG8gZ2l2ZW4gc3RvcmFnZSBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlZmF1bHRUcmFuc2NvZGVyIFRyYW5zY29kZXIgd2hpY2ggaXMgdG8gYmUgdXNlZCBieSBkZWZhdWx0IGZvciBzdG9yYWdlIHJlYWQgYW5kIHdyaXRlIG9wZXJhdGlvbnMuXG4gICAgICogQHBhcmFtIHN1YmplY3QgICAgICAgICAgIFN0b3JhZ2Ugc2VydmljZSB3aGljaCBzaG91bGQgaGFuZGxlIHRvIGFjdHVhbCBzdG9yYWdlIG9mIGRhdGEuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdFRyYW5zY29kZXI6IFN0b3JhZ2VUcmFuc2NvZGVyPFQ+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN1YmplY3Q6IFN0b3JhZ2VTZXJ2aWNlXG4gICAgKSB7IH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIGFuIGVudHJ5IHdpdGggdGhlIHNwZWNpZmllZCBrZXkgZXhpc3RzIGluIHRoZSBzdG9yYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtICAga2V5IElkZW50aWZpZXIgb2YgdGhlIGVudHJ5IGZvciB3aGljaCBpdHMgcHJlc2VuY2UgaW4gdGhlIHN0b3JhZ2UgaXMgdG8gYmUgY2hlY2tlZC5cbiAgICAgKiBAcmV0dXJucyAgICAgYHRydWVgIGlmIGFuIGVudHJ5IHdpdGggdGhlIHNwZWNpZmllZCBrZXkgZXhpc3RzIGluIHRoZSBzdG9yYWdlLCBgZmFsc2VgIGlmIG5vdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YmplY3QuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIHN0b3JlZCBmb3IgdGhlIGVudHJ5IHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5LiBUaGUgZ2l2ZW4gZGVjb2RlciBpcyB1c2VkIHRvIGNvbnZlcnQgdGhlIHN0b3JlZFxuICAgICAqIHZhbHVlIHRvIHRoZSBkZXNpcmVkIHR5cGUuIElmIG5vIGVudHJ5IGZvciB0aGUgc3BlY2lmaWVkIGtleSBleGlzdHMgb3IgaWYgdGhlIGRlY29kZXIgaXMgdW5hYmxlIHRvIGRlY29kZSB0aGUgc3RvcmVkIHZhbHVlLCB0aGVuXG4gICAgICogYHVuZGVmaW5lZGAgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIGtleSAgICAgSWRlbnRpZmllciBvZiB0aGUgZW50cnkgd2hvc2UgdmFsdWUgaXMgdG8gYmUgcmV0cmlldmVkLlxuICAgICAqIEBwYXJhbSAgIGRlY29kZXIgRGVjb2RlciB0byB1c2UgZm9yIGNvbnZlcnRpbmcgdGhlIHN0b3JlZCB2YWx1ZSB0byB0aGUgZGVzaXJlZCByZXR1cm4gdHlwZS5cbiAgICAgKiBAcmV0dXJucyAgICAgICAgIFZhbHVlIG9mIHRoZSBlbnRyeSB0aGF0IGlzIGlkZW50aWZpZWQgYnkgdGhlIHNwZWNpZmllZCBrZXkuIEluIGNhc2UgdGhlIGVudHJ5IGRvZXMgbm90IGV4aXN0IG9yIGlmIGl0IGNhbm5vdCBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgbG9hZGVkIChkdWUgdG8gYSBkZWNvZGluZyBpc3N1ZSksIHRoZW4gYHVuZGVmaW5lZGAgd2lsbCBiZSByZXR1cm5lZCBieSB0aGlzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcsIGRlY29kZXI/OiBTdG9yYWdlRGVjb2Rlcjxhbnk+KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViamVjdC5nZXQoa2V5LCBkZWNvZGVyIHx8IHRoaXMuZGVmYXVsdFRyYW5zY29kZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgb3IgdXBkYXRlcyB0aGUgZW50cnkgaWRlbnRpZmllZCBieSB0aGUgc3BlY2lmaWVkIGtleSB3aXRoIHRoZSBnaXZlbiB2YWx1ZS4gVGhlIHNwZWNpZmllZCBlbmNvZGVyIGlzIHVzZWQgdG8gY29udmVydCB0aGUgZ2l2ZW5cbiAgICAgKiB2YWx1ZSBpbnRvIGEgZm9ybWF0IHRoYXQgY2FuIGJlIHN0b3JlZCBieSB0aGUgc3RvcmFnZSBzZXJ2aWNlJ3MgdW5kZXJseWluZyBzdG9yYWdlLlxuICAgICAqXG4gICAgICogU3RvcmluZyBhIHZhbHVlIGludG8gdGhlIHN0b3JhZ2Ugc2VydmljZSB3aWxsIGVuc3VyZSB0aGF0IGFuIGVxdWl2YWxlbnQgb2YgdGhlIHZhbHVlIGNhbiBiZSByZWFkIGJhY2ssIGkuZS4gdGhlIGRhdGEgYW5kIHN0cnVjdHVyZSBvZlxuICAgICAqIHRoZSB2YWx1ZSB3aWxsIGJlIHRoZSBzYW1lLiBJdCwgaG93ZXZlciwgZG9lcyBub3QgbmVjZXNzYXJpbHkgcmV0dXJuIHRoZSBzYW1lIHJlZmVyZW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgICAgIElkZW50aWZpZXIgb2YgdGhlIGVudHJ5IHdoaWNoIGlzIHRvIGJlIGNyZWF0ZWQgb3IgdXBkYXRlZC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgICBWYWx1ZSB3aGljaCBpcyB0byBiZSBzdG9yZWQuXG4gICAgICogQHBhcmFtIGVuY29kZXIgRW5jb2RlciB1c2VkIHRvIGNvbnZlcnQgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBmb3JtYXQgdGhhdCBjYW4gYmUgdXNlZCBmb3Igc3RvcmFnZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBlbmNvZGVyPzogU3RvcmFnZUVuY29kZXI8YW55Pik6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YmplY3Quc2V0KGtleSwgdmFsdWUsIGVuY29kZXIgfHwgdGhpcy5kZWZhdWx0VHJhbnNjb2Rlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZW50cnkgdGhhdCBpcyBpZGVudGlmaWVkIGJ5IHRoZSBzcGVjaWZpZWQga2V5LiBBdHRlbXB0aW5nIHRvIHJlbW92ZSBhbiBlbnRyeSBmb3IgYW4gdW5rbm93biBrZXkgd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAgICAgKiBBdHRlbXB0aW5nIHRvIHJldHJpZXZlIGFuIGVudHJ5IHZpYSB0aGUgYGdldGAgbWV0aG9kIGFmdGVyIGl0IGhhcyBiZWVuIHJlbW92ZWQgd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IElkZW50aWZpZXIgb2YgdGhlIGVudHJ5IHdoaWNoIGlzIHRvIGJlIHJlbW92ZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YmplY3QucmVtb3ZlKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBzdG9yYWdlIGJ5IHJlbW92aW5nIGFsbCBlbnRyaWVzLiBTdWJzZXF1ZW50IGBnZXQoeClgIGNhbGxzIGZvciBhIGtleSAqeCogd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAsIHVudGlsIGEgbmV3IHZhbHVlIGlzIHNldFxuICAgICAqIGZvciBrZXkgKngqLlxuICAgICAqL1xuICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdWJqZWN0LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzdG9yYWdlIHNlcnZpY2UgdGhhdCB1c2VzIHRoZSBzcGVjaWZpZWQgdHJhbnNjb2RlciBieSBkZWZhdWx0IGZvciByZWFkIGFuZCB3cml0ZSBvcGVyYXRpb25zLiBUaGUgbmV3IHN0b3JhZ2Ugc2VydmljZVxuICAgICAqIHVzZXMgdGhlIHN0b3JhZ2Ugc2VydmljZSBvbiB3aGljaCB0aGlzIGZ1bmN0aW9uIGlzIGludm9rZWQgYXMgdW5kZXJseWluZyBzdG9yYWdlLiBCb3RoIHN0b3JhZ2Ugc2VydmljZXMgd2lsbCB0aHVzIGJlIGFibGUgdG8gYWNjZXNzXG4gICAgICogdGhlIHNhbWUgZGF0YS5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IHRyYW5zY29kZXIgd2lsbCBub3QgYmUgY2hhbmdlZCBmb3IgdGhlIHN0b3JhZ2Ugc2VydmljZSBvbiB3aGljaCB0aGlzIGZ1bmN0aW9uIGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB0cmFuc2NvZGVyIFRyYW5zY29kZXIgdGhhdCBzaG91bGQgYmUgdXNlZCBieSBkZWZhdWx0IGZvciByZWFkIGFuZCB3cml0ZSBvcGVyYXRpb25zIGJ5IHRoZSBuZXcgc3RvcmFnZSBzZXJ2aWNlLlxuICAgICAqIEByZXR1cm5zICAgICAgICAgICAgQSBuZXcgc3RvcmFnZSBzZXJ2aWNlIHRoYXQgdXNlcyB0aGUgc3BlY2lmaWVkIHRyYW5zY29kZXIgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgd2l0aERlZmF1bHRUcmFuc2NvZGVyPFg+KHRyYW5zY29kZXI6IFN0b3JhZ2VUcmFuc2NvZGVyPFg+KTogU3RvcmFnZVNlcnZpY2U8WD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5U3RvcmFnZVNlcnZpY2UodHJhbnNjb2RlciwgdGhpcy5zdWJqZWN0KTtcbiAgICB9XG59XG4iXX0=