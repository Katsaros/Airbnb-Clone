{"version":3,"file":"ngx-webstorage-service.js.map","sources":["ng://ngx-webstorage-service/src/proxy-storage.service.ts","ng://ngx-webstorage-service/src/base-storage.service.ts","ng://ngx-webstorage-service/src/storage-transcoders.ts","ng://ngx-webstorage-service/src/in-memory-storage.service.ts","ng://ngx-webstorage-service/src/web-storage.service.ts","ng://ngx-webstorage-service/src/storage-providers.ts","ng://ngx-webstorage-service/src/storage-service.module.ts"],"sourcesContent":["import { StorageService } from './storage.service';\nimport { StorageTranscoder, StorageDecoder, StorageEncoder } from './storage-transcoder';\n\n/**\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\n * different default transcoder.\n */\nexport class ProxyStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\n     * read and writes are delegated to given storage service.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     * @param subject           Storage service which should handle to actual storage of data.\n     */\n    constructor(\n        private readonly defaultTranscoder: StorageTranscoder<T>,\n        private readonly subject: StorageService\n    ) { }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.subject.has(key);\n    }\n\n    /*\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        return this.subject.get(key, decoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.subject.set(key, value, encoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.subject.remove(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.subject.clear();\n    }\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this.subject);\n    }\n}\n","import { StorageService } from './storage.service';\nimport { StorageDecoder, StorageEncoder, StorageTranscoder } from './storage-transcoder';\nimport { ProxyStorageService } from './proxy-storage.service';\n\n/**\n * Base implementation for storage services.\n */\nexport abstract class BaseStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     */\n    constructor(private readonly defaultTranscoder: StorageTranscoder<T>) {\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public abstract has(key: string): boolean;\n\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        const value = this.getItem(key);\n\n        return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public abstract remove(key: string): void;\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public abstract clear(): void;\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this);\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected abstract getItem(key: string): string | undefined;\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected abstract setItem(key: string, value: string): void;\n\n}\n","import { StorageTranscoder } from './storage-transcoder';\n\n/** Transcoder that encodes values as JSON strings. */\nexport class JsonStorageTranscoder implements StorageTranscoder<any> {\n\n    public encode(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    public decode(value: string): any {\n        try {\n            return JSON.parse(value);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n}\n\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nexport class StringStorageTranscoder implements StorageTranscoder<string> {\n    public encode(value: string): string {\n        return value;\n    }\n\n    public decode(value: string): string {\n        return value;\n    }\n}\n\n/** Transcoder that encodes/decodes `boolean` values. */\nexport class BooleanStorageTranscoder implements StorageTranscoder<boolean> {\n    public encode(value: boolean): string {\n        return value.toString();\n    }\n\n    public decode(value: string): boolean | undefined {\n        if (value === 'true') {\n            return true;\n        }\n        if (value === 'false') {\n            return false;\n        }\n\n        return undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `number` values. */\nexport class NumberStorageTranscoder implements StorageTranscoder<number> {\n    public encode(value: number): string {\n        return value.toString();\n    }\n\n    public decode(value: string): number | undefined {\n        const parsedNumber = Number(value);\n\n        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to ISO strings. */\nexport class DateIsoStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.toISOString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = Date.parse(value);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to epoch timestamps. */\nexport class DateEpochStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.valueOf().toString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = parseInt(value, 10);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** A set of storage transcoders. */\nexport const StorageTranscoders = {\n    /** Transcoder that encodes values as JSON strings. */\n    JSON: new JsonStorageTranscoder() as StorageTranscoder<any>,\n\n    /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n    STRING: new StringStorageTranscoder() as StorageTranscoder<string>,\n\n    /** Transcoder that encodes/decodes `boolean` values. */\n    BOOLEAN: new BooleanStorageTranscoder() as StorageTranscoder<boolean>,\n\n    /** Transcoder that encodes/decodes `number` values. */\n    NUMBER: new NumberStorageTranscoder() as StorageTranscoder<number>,\n\n    /** Transcoder that encodes/decodes `Date` values into ISO strings. */\n    DATE_ISO_STRING: new DateIsoStorageTranscoder() as StorageTranscoder<Date>,\n\n    /** Transcoder that encodes/decodes `Date` values into epoch timestamps. */\n    DATE_EPOCH_TIME: new DateEpochStorageTranscoder() as StorageTranscoder<Date>\n};\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nexport class InMemoryStorageService extends BaseStorageService<any> {\n\n    /** A map that serves as the underlying backing storage for this service. */\n    private readonly storage: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Creates a new `InMemoryStorageService` instance.\n     */\n    constructor() {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.delete(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        if (!this.storage.has(key)) {\n            return undefined;\n        }\n\n        return this.storage.get(key)!;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        this.storage.set(key, value);\n    }\n\n}\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nexport class WebStorageService extends BaseStorageService<any> {\n\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    constructor(private readonly storage: Storage) {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.getItem(key) !== null;\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.removeItem(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        const value = this.storage.getItem(key);\n\n        return value !== null ? value : undefined;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        return this.storage.setItem(key, value);\n    }\n\n}\n\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param   storage Storage object which is to be tested for availability.\n * @returns         `true` if the specified storage can be used, `false` if not.\n */\nexport function isStorageAvailable(storage: Storage): boolean {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n\n    // Check if the storage can actually be accessed.\n    try {\n        const now = Date.now();\n        const testItemKey = `storage-test-entry-${now}`;\n        const testItemValue = `storage-test-value-${now}`;\n        storage.setItem(testItemKey, testItemValue);\n        const retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n\n        return retrievedItemValue === testItemValue;\n    } catch (error) {\n        return false;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { InMemoryStorageService } from './in-memory-storage.service';\nimport { StorageService } from './storage.service';\nimport { isStorageAvailable, WebStorageService } from './web-storage.service';\n\nexport function sessionStorageFactory(): StorageService {\n    try {\n        if (typeof sessionStorage as any !== 'undefined' && isStorageAvailable(sessionStorage)) {\n            return new WebStorageService(sessionStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the session storage service. */\nexport const SESSION_STORAGE = new InjectionToken<StorageService>(\n    'SESSION_STORAGE',\n    { providedIn: 'root', factory: sessionStorageFactory }\n);\n\nexport function localStorageFactory(): StorageService {\n    try {\n        if (typeof localStorage as any !== 'undefined' && isStorageAvailable(localStorage)) {\n            return new WebStorageService(localStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the local storage service. */\nexport const LOCAL_STORAGE = new InjectionToken<StorageService>(\n    'LOCAL_STORAGE',\n    { providedIn: 'root', factory: localStorageFactory }\n);\n","import { NgModule } from '@angular/core';\n\n/**\n * @deprecated You no longer need to import the `StorageServiceModule`, since the `SESSION_STORAGE` and `LOCAL_STORAGE` injection tokens are\n * now 'self providing' in the root injector.\n */\n@NgModule()\nexport class StorageServiceModule {\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
