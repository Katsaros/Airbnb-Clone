{"version":3,"file":"ngx-webstorage-service.js","sources":["ng:/ngx-webstorage-service/src/proxy-storage.service.ts","ng:/ngx-webstorage-service/src/base-storage.service.ts","ng:/ngx-webstorage-service/src/storage-transcoders.ts","ng:/ngx-webstorage-service/src/in-memory-storage.service.ts","ng:/ngx-webstorage-service/src/web-storage.service.ts","ng:/ngx-webstorage-service/src/storage-providers.ts","ng:/ngx-webstorage-service/src/storage-service.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { StorageService } from './storage.service';\nimport { StorageTranscoder, StorageDecoder, StorageEncoder } from './storage-transcoder';\n\n/**\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\n * different default transcoder.\n */\nexport class ProxyStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\n     * read and writes are delegated to given storage service.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     * @param subject           Storage service which should handle to actual storage of data.\n     */\n    constructor(\n        private readonly defaultTranscoder: StorageTranscoder<T>,\n        private readonly subject: StorageService\n    ) { }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.subject.has(key);\n    }\n\n    /*\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        return this.subject.get(key, decoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.subject.set(key, value, encoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.subject.remove(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.subject.clear();\n    }\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this.subject);\n    }\n}\n","import { StorageService } from './storage.service';\nimport { StorageDecoder, StorageEncoder, StorageTranscoder } from './storage-transcoder';\nimport { ProxyStorageService } from './proxy-storage.service';\n\n/**\n * Base implementation for storage services.\n */\nexport abstract class BaseStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     */\n    constructor(private readonly defaultTranscoder: StorageTranscoder<T>) {\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public abstract has(key: string): boolean;\n\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        const value = this.getItem(key);\n\n        return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public abstract remove(key: string): void;\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public abstract clear(): void;\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this);\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected abstract getItem(key: string): string | undefined;\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected abstract setItem(key: string, value: string): void;\n\n}\n","import { StorageTranscoder } from './storage-transcoder';\n\n/** Transcoder that encodes values as JSON strings. */\nexport class JsonStorageTranscoder implements StorageTranscoder<any> {\n\n    public encode(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    public decode(value: string): any {\n        try {\n            return JSON.parse(value);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n}\n\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nexport class StringStorageTranscoder implements StorageTranscoder<string> {\n    public encode(value: string): string {\n        return value;\n    }\n\n    public decode(value: string): string {\n        return value;\n    }\n}\n\n/** Transcoder that encodes/decodes `boolean` values. */\nexport class BooleanStorageTranscoder implements StorageTranscoder<boolean> {\n    public encode(value: boolean): string {\n        return value.toString();\n    }\n\n    public decode(value: string): boolean | undefined {\n        if (value === 'true') {\n            return true;\n        }\n        if (value === 'false') {\n            return false;\n        }\n\n        return undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `number` values. */\nexport class NumberStorageTranscoder implements StorageTranscoder<number> {\n    public encode(value: number): string {\n        return value.toString();\n    }\n\n    public decode(value: string): number | undefined {\n        const parsedNumber = Number(value);\n\n        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to ISO strings. */\nexport class DateIsoStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.toISOString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = Date.parse(value);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to epoch timestamps. */\nexport class DateEpochStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.valueOf().toString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = parseInt(value, 10);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** A set of storage transcoders. */\nexport const StorageTranscoders = {\n    /** Transcoder that encodes values as JSON strings. */\n    JSON: new JsonStorageTranscoder() as StorageTranscoder<any>,\n\n    /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n    STRING: new StringStorageTranscoder() as StorageTranscoder<string>,\n\n    /** Transcoder that encodes/decodes `boolean` values. */\n    BOOLEAN: new BooleanStorageTranscoder() as StorageTranscoder<boolean>,\n\n    /** Transcoder that encodes/decodes `number` values. */\n    NUMBER: new NumberStorageTranscoder() as StorageTranscoder<number>,\n\n    /** Transcoder that encodes/decodes `Date` values into ISO strings. */\n    DATE_ISO_STRING: new DateIsoStorageTranscoder() as StorageTranscoder<Date>,\n\n    /** Transcoder that encodes/decodes `Date` values into epoch timestamps. */\n    DATE_EPOCH_TIME: new DateEpochStorageTranscoder() as StorageTranscoder<Date>\n};\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nexport class InMemoryStorageService extends BaseStorageService<any> {\n\n    /** A map that serves as the underlying backing storage for this service. */\n    private readonly storage: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Creates a new `InMemoryStorageService` instance.\n     */\n    constructor() {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.delete(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        if (!this.storage.has(key)) {\n            return undefined;\n        }\n\n        return this.storage.get(key)!;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        this.storage.set(key, value);\n    }\n\n}\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nexport class WebStorageService extends BaseStorageService<any> {\n\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    constructor(private readonly storage: Storage) {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.getItem(key) !== null;\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.removeItem(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        const value = this.storage.getItem(key);\n\n        return value !== null ? value : undefined;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        return this.storage.setItem(key, value);\n    }\n\n}\n\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param   storage Storage object which is to be tested for availability.\n * @returns         `true` if the specified storage can be used, `false` if not.\n */\nexport function isStorageAvailable(storage: Storage): boolean {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n\n    // Check if the storage can actually be accessed.\n    try {\n        const now = Date.now();\n        const testItemKey = `storage-test-entry-${now}`;\n        const testItemValue = `storage-test-value-${now}`;\n        storage.setItem(testItemKey, testItemValue);\n        const retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n\n        return retrievedItemValue === testItemValue;\n    } catch (error) {\n        return false;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { InMemoryStorageService } from './in-memory-storage.service';\nimport { StorageService } from './storage.service';\nimport { isStorageAvailable, WebStorageService } from './web-storage.service';\n\nexport function sessionStorageFactory(): StorageService {\n    try {\n        if (typeof sessionStorage as any !== 'undefined' && isStorageAvailable(sessionStorage)) {\n            return new WebStorageService(sessionStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the session storage service. */\nexport const SESSION_STORAGE = new InjectionToken<StorageService>(\n    'SESSION_STORAGE',\n    { providedIn: 'root', factory: sessionStorageFactory }\n);\n\nexport function localStorageFactory(): StorageService {\n    try {\n        if (typeof localStorage as any !== 'undefined' && isStorageAvailable(localStorage)) {\n            return new WebStorageService(localStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the local storage service. */\nexport const LOCAL_STORAGE = new InjectionToken<StorageService>(\n    'LOCAL_STORAGE',\n    { providedIn: 'root', factory: localStorageFactory }\n);\n","import { NgModule } from '@angular/core';\n\n/**\n * @deprecated You no longer need to import the `StorageServiceModule`, since the `SESSION_STORAGE` and `LOCAL_STORAGE` injection tokens are\n * now 'self providing' in the root injector.\n */\n@NgModule()\nexport class StorageServiceModule {\n\n}\n"]}