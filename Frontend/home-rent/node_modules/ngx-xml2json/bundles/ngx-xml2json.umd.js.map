{"version":3,"file":"ngx-xml2json.umd.js.map","sources":["ng://ngx-xml2json/lib/ngx-xml2json.service.ts","ng://ngx-xml2json/lib/ngx-xml2json.component.ts","ng://ngx-xml2json/lib/ngx-xml2json.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxXml2jsonService {\n\n  constructor() { }\n\n  xmlToJson(xml) {\n\n    let obj = {};\n\n    if (xml.nodeType === 1) {\n      if (xml.attributes.length > 0) {\n        obj['@attributes'] = {};\n        for (let j = 0; j < xml.attributes.length; j += 1) {\n          const attribute = xml.attributes.item(j);\n          obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\n        }\n      }\n    } else if (xml.nodeType === 3) {\n      obj = xml.nodeValue;\n    }\n\n    if (xml.hasChildNodes() && xml.childNodes.length === 1 && xml.childNodes[0].nodeType === 3) {\n      obj = xml.childNodes[0].nodeValue;\n    } else if (xml.hasChildNodes()) {\n      for (let i = 0; i < xml.childNodes.length; i += 1) {\n        const item = xml.childNodes.item(i);\n        const nodeName = item.nodeName;\n        if (typeof (obj[nodeName]) === 'undefined') {\n          obj[nodeName] = this.xmlToJson(item);\n        } else {\n          if (typeof (obj[nodeName].push) === 'undefined') {\n            const old = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(this.xmlToJson(item));\n        }\n      }\n    }\n    return obj;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-xml2json',\n  template: `\n    <p>\n      Ngx-xml2json\n    </p>\n  `,\n  styles: []\n})\nexport class NgxXml2jsonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxXml2jsonComponent } from './ngx-xml2json.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxXml2jsonComponent],\n  exports: [NgxXml2jsonComponent]\n})\nexport class NgxXml2jsonModule { }\n"],"names":["Injectable","Component","NgModule"],"mappings":";;;;;;;;;;AAAA;QAOE;SAAiB;;;;;QAEjB,sCAAS;;;;YAAT,UAAU,GAAG;gBAEX,qBAAI,GAAG,GAAG,EAAE,CAAC;gBAEb,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,EAAE;oBACtB,IAAI,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC7B,GAAG,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;wBACxB,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;4BACjD,qBAAM,SAAS,GAAG,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACzC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC;yBAC9D;qBACF;iBACF;qBAAM,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,EAAE;oBAC7B,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC;iBACrB;gBAED,IAAI,GAAG,CAAC,aAAa,EAAE,IAAI,GAAG,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,CAAC,EAAE;oBAC1F,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;iBACnC;qBAAM,IAAI,GAAG,CAAC,aAAa,EAAE,EAAE;oBAC9B,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;wBACjD,qBAAM,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACpC,qBAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAC/B,IAAI,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC,KAAK,WAAW,EAAE;4BAC1C,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;yBACtC;6BAAM;4BACL,IAAI,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;gCAC/C,qBAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC;gCAC1B,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;gCACnB,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;6BACzB;4BACD,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;yBAC1C;qBACF;iBACF;gBACD,OAAO,GAAG,CAAC;aACZ;;oBA1CFA,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;iCAJD;;;;;;;ACAA;QAaE;SAAiB;;;;QAEjB,uCAAQ;;;YAAR,eAAa;;oBAbdC,YAAS,SAAC;wBACT,QAAQ,EAAE,kBAAkB;wBAC5B,QAAQ,EAAE,6CAIT;wBACD,MAAM,EAAE,EAAE;qBACX;;;;mCAVD;;;;;;;ACAA;;;;oBAGCC,WAAQ,SAAC;wBACR,OAAO,EAAE,EACR;wBACD,YAAY,EAAE,CAAC,oBAAoB,CAAC;wBACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC;qBAChC;;gCARD;;;;;;;;;;;;;;;;;;;;;;;;;"}
