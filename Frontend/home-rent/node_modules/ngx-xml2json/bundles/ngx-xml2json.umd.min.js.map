{"version":3,"sources":["ng://ngx-xml2json/lib/ngx-xml2json.service.ts","ng://ngx-xml2json/lib/ngx-xml2json.component.ts","ng://ngx-xml2json/lib/ngx-xml2json.module.ts"],"names":["NgxXml2jsonService","prototype","xmlToJson","xml","obj","nodeType","attributes","length","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","i","this","old","push","Injectable","args","providedIn","NgxXml2jsonComponent","ngOnInit","Component","selector","template","styles","NgxXml2jsonModule","NgModule","imports","declarations","exports"],"mappings":"sQAAA,IAAAA,EAAA,WAOE,SAAAA,YAEAA,EAAAC,UAAAC,UAAA,SAAUC,GAER,IAAIC,EAAM,GAEV,GAAqB,IAAjBD,EAAIE,UACN,GAA4B,EAAxBF,EAAIG,WAAWC,OAAY,CAC7BH,EAAI,eAAiB,GACrB,IAAK,IAAII,EAAI,EAAGA,EAAIL,EAAIG,WAAWC,OAAQC,GAAK,EAAG,CACjD,IAAMC,EAAYN,EAAIG,WAAWI,KAAKF,GACtCJ,EAAI,eAAeK,EAAUE,UAAYF,EAAUG,iBAG7B,IAAjBT,EAAIE,WACbD,EAAMD,EAAIS,WAGZ,GAAIT,EAAIU,iBAA6C,IAA1BV,EAAIW,WAAWP,QAA+C,IAA/BJ,EAAIW,WAAW,GAAGT,SAC1ED,EAAMD,EAAIW,WAAW,GAAGF,eACnB,GAAIT,EAAIU,gBACb,IAAK,IAAIE,EAAI,EAAGA,EAAIZ,EAAIW,WAAWP,OAAQQ,GAAK,EAAG,CACjD,IAAML,EAAOP,EAAIW,WAAWJ,KAAKK,GAC3BJ,EAAWD,EAAKC,SACtB,GAA+B,oBAAnBP,EAAIO,GACdP,EAAIO,GAAYK,KAAKd,UAAUQ,OAC1B,CACL,GAAoC,oBAAxBN,EAAIO,GAAc,KAAmB,CAC/C,IAAMM,EAAMb,EAAIO,GAChBP,EAAIO,GAAY,GAChBP,EAAIO,GAAUO,KAAKD,GAErBb,EAAIO,GAAUO,KAAKF,KAAKd,UAAUQ,KAIxC,OAAON,uBAzCVe,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WAaE,SAAAA,YAEAA,EAAArB,UAAAsB,SAAA,iCAbDC,EAAAA,UAASJ,KAAA,CAAC,CACTK,SAAU,mBACVC,SAAU,8CAKVC,OAAQ,+CATV,GCAAC,EAAA,oDAGCC,EAAAA,SAAQT,KAAA,CAAC,CACRU,QAAS,GAETC,aAAc,CAACT,GACfU,QAAS,CAACV,SAPZ","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxXml2jsonService {\n\n  constructor() { }\n\n  xmlToJson(xml) {\n\n    let obj = {};\n\n    if (xml.nodeType === 1) {\n      if (xml.attributes.length > 0) {\n        obj['@attributes'] = {};\n        for (let j = 0; j < xml.attributes.length; j += 1) {\n          const attribute = xml.attributes.item(j);\n          obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\n        }\n      }\n    } else if (xml.nodeType === 3) {\n      obj = xml.nodeValue;\n    }\n\n    if (xml.hasChildNodes() && xml.childNodes.length === 1 && xml.childNodes[0].nodeType === 3) {\n      obj = xml.childNodes[0].nodeValue;\n    } else if (xml.hasChildNodes()) {\n      for (let i = 0; i < xml.childNodes.length; i += 1) {\n        const item = xml.childNodes.item(i);\n        const nodeName = item.nodeName;\n        if (typeof (obj[nodeName]) === 'undefined') {\n          obj[nodeName] = this.xmlToJson(item);\n        } else {\n          if (typeof (obj[nodeName].push) === 'undefined') {\n            const old = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(this.xmlToJson(item));\n        }\n      }\n    }\n    return obj;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-xml2json',\n  template: `\n    <p>\n      Ngx-xml2json\n    </p>\n  `,\n  styles: []\n})\nexport class NgxXml2jsonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxXml2jsonComponent } from './ngx-xml2json.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxXml2jsonComponent],\n  exports: [NgxXml2jsonComponent]\n})\nexport class NgxXml2jsonModule { }\n"]}