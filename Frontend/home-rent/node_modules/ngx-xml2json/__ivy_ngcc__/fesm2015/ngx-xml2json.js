import { Injectable, Component, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class NgxXml2jsonService {
    constructor() { }
    /**
     * @param {?} xml
     * @return {?}
     */
    xmlToJson(xml) {
        let /** @type {?} */ obj = {};
        if (xml.nodeType === 1) {
            if (xml.attributes.length > 0) {
                obj['@attributes'] = {};
                for (let /** @type {?} */ j = 0; j < xml.attributes.length; j += 1) {
                    const /** @type {?} */ attribute = xml.attributes.item(j);
                    obj['@attributes'][attribute.nodeName] = attribute.nodeValue;
                }
            }
        }
        else if (xml.nodeType === 3) {
            obj = xml.nodeValue;
        }
        if (xml.hasChildNodes() && xml.childNodes.length === 1 && xml.childNodes[0].nodeType === 3) {
            obj = xml.childNodes[0].nodeValue;
        }
        else if (xml.hasChildNodes()) {
            for (let /** @type {?} */ i = 0; i < xml.childNodes.length; i += 1) {
                const /** @type {?} */ item = xml.childNodes.item(i);
                const /** @type {?} */ nodeName = item.nodeName;
                if (typeof (obj[nodeName]) === 'undefined') {
                    obj[nodeName] = this.xmlToJson(item);
                }
                else {
                    if (typeof (obj[nodeName].push) === 'undefined') {
                        const /** @type {?} */ old = obj[nodeName];
                        obj[nodeName] = [];
                        obj[nodeName].push(old);
                    }
                    obj[nodeName].push(this.xmlToJson(item));
                }
            }
        }
        return obj;
    }
}
NgxXml2jsonService.ɵfac = function NgxXml2jsonService_Factory(t) { return new (t || NgxXml2jsonService)(); };
NgxXml2jsonService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxXml2jsonService, factory: NgxXml2jsonService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgxXml2jsonService.ctorParameters = () => [];
/** @nocollapse */ NgxXml2jsonService.ngInjectableDef = defineInjectable({ factory: function NgxXml2jsonService_Factory() { return new NgxXml2jsonService(); }, token: NgxXml2jsonService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxXml2jsonService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxXml2jsonComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
NgxXml2jsonComponent.ɵfac = function NgxXml2jsonComponent_Factory(t) { return new (t || NgxXml2jsonComponent)(); };
NgxXml2jsonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxXml2jsonComponent, selectors: [["lib-ngx-xml2json"]], decls: 2, vars: 0, template: function NgxXml2jsonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p");
        ɵngcc0.ɵɵtext(1, " Ngx-xml2json ");
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/** @nocollapse */
NgxXml2jsonComponent.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxXml2jsonComponent, [{
        type: Component,
        args: [{
                selector: 'lib-ngx-xml2json',
                template: `
    <p>
      Ngx-xml2json
    </p>
  `,
                styles: []
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxXml2jsonModule {
}
NgxXml2jsonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxXml2jsonModule });
NgxXml2jsonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxXml2jsonModule_Factory(t) { return new (t || NgxXml2jsonModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxXml2jsonModule, { declarations: [NgxXml2jsonComponent], exports: [NgxXml2jsonComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxXml2jsonModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [NgxXml2jsonComponent],
                exports: [NgxXml2jsonComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxXml2jsonService, NgxXml2jsonComponent, NgxXml2jsonModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,